syntax = "proto3";
import "koinos/options.proto";
package core;

/*
* Objects
*/
message str {
  string value = 1;
}
message uint32 {
  uint32 value = 1;
}
message uint64 {
  uint64 value = 1 [jstype = JS_STRING];
}
message boole {
  bool value = 1;
}
message empty_object {
}
message info {
  string name = 1;
  string symbol = 2;
  uint32 decimals = 3;
}
message token_object {
  bool is_nameservice = 1;
  string nameservice = 2;
  bytes token_address = 3 [(koinos.btype) = ADDRESS];
}
message config_object {  
  bool initialized = 1;
  bytes periphery = 2 [(koinos.btype) = ADDRESS];
  token_object token_a = 3;
  token_object token_b = 4;
  string k_last = 5;
  uint64 reserve_a = 6 [jstype = JS_STRING];
  uint64 reserve_b = 7 [jstype = JS_STRING];
  uint64 block_time = 8 [jstype = JS_STRING];
}


/*
* RPC calls
*/

// @description Get name of the token
// @read-only true
// @result str
message name_arguments {}

// @description Get the symbol of the token
// @read-only true
// @result str
message symbol_arguments {}

// @description Get the decimals of the token
// @read-only true
// @result uint32
message decimals_arguments {}

// @description Get name, symbol and decimals
// @read-only true
// @result info
message get_info_arguments {}

// @description Get total supply
// @read-only true
// @result uint64
message total_supply_arguments {}

// @description Get balance of an account 7
// @read-only true
// @result uint64
message balance_of_arguments {
  bytes owner = 1 [(koinos.btype) = ADDRESS];
}

// @description Get balance of an account2 
// @read-only true
// @result uint64
message allowance_arguments {
  bytes owner = 1 [(koinos.btype) = ADDRESS];
  bytes spender = 2 [(koinos.btype) = ADDRESS];
}

// @description Get balance of an account 6
// @read-only false
// @result empty_object
message transfer_arguments {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes to = 2 [(koinos.btype) = ADDRESS];
  uint64 value = 3 [jstype = JS_STRING];
}

// @description Get balance of an account 3
// @read-only false
// @result empty_object
message approve_arguments {
  bytes owner = 1 [(koinos.btype) = ADDRESS];
  bytes spender = 2 [(koinos.btype) = ADDRESS];
  uint64 value = 3 [jstype = JS_STRING];
}

// @description initializing core contract
// @read-only true
message get_reserves_arguments {}
message get_reserves_result {
  string k_last = 1;
  uint64 reserve_a = 2 [jstype = JS_STRING];
  uint64 reserve_b = 3 [jstype = JS_STRING];
  uint64 block_time = 4 [jstype = JS_STRING];
}

// @description initializing core contract
// @read-only true
message get_tokens_arguments {}
message get_tokens_result {
  bytes token_a = 1 [(koinos.btype) = ADDRESS];
  bytes token_b = 2 [(koinos.btype) = ADDRESS];
}

// @description initializing core contract
// @read-only false
// @result empty_object
message initialize_arguments {
  token_object token_a = 1;
  token_object token_b = 2;
}

// @description mint core contract
// @read-only false
// @result uint64
message mint_arguments {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  bytes fee = 2 [(koinos.btype) = ADDRESS];
}

// @description mint core contract
// @read-only false
message burn_arguments {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  bytes fee = 2 [(koinos.btype) = ADDRESS];
}
message burn_result {
  uint64 amount_a = 1 [jstype = JS_STRING];
  uint64 amount_b = 2 [jstype = JS_STRING];
}

// @description swap core contract
// @read-only false
// @result empty_object
message swap_arguments {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  uint64 amount_a = 2 [jstype = JS_STRING];
  uint64 amount_b = 3 [jstype = JS_STRING];
}

// @description swap core contract
// @read-only false
// @result empty_object
message skim_arguments {
  bytes to = 1 [(koinos.btype) = ADDRESS];
}

// @description swap core contract
// @read-only false
// @result empty_object
message sync_arguments {}


/*
* Events
*/
message initialize_event {
  string token_a = 1;
  string token_b = 2;
}
message mint_event {
  bytes sender = 1 [(koinos.btype) = ADDRESS];
  uint64 amount_a = 2 [(koinos.btype) = ADDRESS];
  uint64 amount_b = 3 [(koinos.btype) = ADDRESS];
}
message burn_event {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  bytes sender = 2 [(koinos.btype) = ADDRESS];
  uint64 amount_a = 3 [(koinos.btype) = ADDRESS];
  uint64 amount_b = 4 [(koinos.btype) = ADDRESS];
}
message swap_event {
  bytes to = 1 [(koinos.btype) = ADDRESS];
  bytes sender = 2 [(koinos.btype) = ADDRESS];
  uint64 amount_in_a = 3 [(koinos.btype) = ADDRESS];
  uint64 amount_in_b = 4 [(koinos.btype) = ADDRESS];
  uint64 amount_out_a = 5 [(koinos.btype) = ADDRESS];
  uint64 amount_out_b = 6 [(koinos.btype) = ADDRESS];
}
message sync_event {
  uint64 reserve_a = 1 [jstype = JS_STRING];
  uint64 reserve_b = 2 [jstype = JS_STRING];
}
